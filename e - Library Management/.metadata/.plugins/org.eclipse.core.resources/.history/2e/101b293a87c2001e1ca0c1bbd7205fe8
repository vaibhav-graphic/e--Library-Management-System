<%@ page language="java" contentType="text/html; charset=ISO-8859-1"
    pageEncoding="ISO-8859-1"%>
<%@ page import="java.sql.Connection, java.sql.PreparedStatement, java.sql.ResultSet, java.sql.SQLException, java.util.List, java.util.ArrayList" %>


<html>
<head>
    <title>Book Search and Order</title>
    <!-- Add your CSS and Bootstrap links here -->
</head>
<body>

<%
    String bookName = request.getParameter("bookName");
    String author = request.getParameter("author");

    List<Book> books = searchBooks(bookName, author);
%>

<div class="container">
    <h1>Book Search and Order</h1>

    <form action="SearchBook.jsp" method="get">
        <label for="bookName">Book Name:</label>
        <input type="text" id="bookName" name="bookName" required>

        <label for="author">Author:</label>
        <input type="text" id="author" name="author" required>

        <button type="submit" class="btn btn-primary">Search</button>
    </form>

    <hr>

    <% if (books != null && !books.isEmpty()) { %>
        <form action="PlaceOrder.jsp" method="post">
            <label for="selectedBook">Select Book:</label>
            <select id="selectedBook" name="selectedBook" required>
                <% for (Book book : books) { %>
                    <option value="<%= book.getBookId() %>"><%= book.getBookName() %> by <%= book.getAuthor() %></option>
                <% } %>
            </select>

            <label for="studentId">Student ID:</label>
            <input type="text" id="studentId" name="studentId" required>

            <label for="studentName">Student Name:</label>
            <input type="text" id="studentName" name="studentName" required>

            <label for="issueDate">Issue Date:</label>
            <input type="date" id="issueDate" name="issueDate" required>

            <label for="returnDate">Return Date:</label>
            <input type="date" id="returnDate" name="returnDate" required>

            <button type="submit" class="btn btn-success">Place Order</button>
        </form>
    <% } else if (books != null) { %>
        <p>No books found.</p>
    <% } %>
</div>

<%
    // Method to search for books in the database
    private List<Book> searchBooks(String bookName, String author) {
        List<Book> books = new ArrayList<>();

        try (Connection connection = DBUtil.getConnection();
             PreparedStatement preparedStatement = connection.prepareStatement("SELECT * FROM book WHERE book_name LIKE ? AND author LIKE ?")) {

            preparedStatement.setString(1, "%" + bookName + "%");
            preparedStatement.setString(2, "%" + author + "%");

            try (ResultSet resultSet = preparedStatement.executeQuery()) {
                while (resultSet.next()) {
                    Book book = new Book();
                    book.setBookId(resultSet.getInt("book_id"));
                    book.setBookName(resultSet.getString("book_name"));
                    book.setAuthor(resultSet.getString("author"));
                    // Add more attributes if needed
                    books.add(book);
                }
            }

        } catch (SQLException e) {
            e.printStackTrace();
        }

        return books;
    }
%>

</body>
</html>
    